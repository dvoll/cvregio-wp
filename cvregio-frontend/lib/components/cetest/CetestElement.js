function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import * as ReactDOM from 'react-dom'; // import * as retargetEvents from 'react-shadow-dom-retarget-events';

import Cetest from './Cetest';
export default class CollapsiblePanel extends HTMLElement {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "mountPoint", null);

    _defineProperty(this, "name", '');
  }

  static get observedAttributes() {
    return ['name'];
  }

  createCollapsed(name) {
    return React.createElement(Cetest, {
      name
    }, React.createElement('slot'));
  }

  connectedCallback() {
    console.log('connected');
    this.mountPoint = document.createElement('span'); // const shadowRoot = this.attachShadow({ mode: 'open' });
    // shadowRoot.appendChild(this.mountPoint);

    this.appendChild(this.mountPoint);
    const name = this.getAttribute('name') || this.name;
    ReactDOM.render(this.createCollapsed(name), this.mountPoint); // retargetEvents(shadowRoot);
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if (this.mountPoint && name === 'name') {
      ReactDOM.render(this.createCollapsed(newValue), this.mountPoint);
    }
  }

}
window.customElements.define('collapsible-panel', CollapsiblePanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NldGVzdC9DZXRlc3RFbGVtZW50LnRzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUmVhY3RET00iLCJDZXRlc3QiLCJDb2xsYXBzaWJsZVBhbmVsIiwiSFRNTEVsZW1lbnQiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJjcmVhdGVDb2xsYXBzZWQiLCJuYW1lIiwiY3JlYXRlRWxlbWVudCIsImNvbm5lY3RlZENhbGxiYWNrIiwiY29uc29sZSIsImxvZyIsIm1vdW50UG9pbnQiLCJkb2N1bWVudCIsImFwcGVuZENoaWxkIiwiZ2V0QXR0cmlidXRlIiwicmVuZGVyIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsIndpbmRvdyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLE9BQU8sS0FBS0MsUUFBWixNQUEwQixXQUExQixDLENBQ0E7O0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixVQUFuQjtBQUVBLGVBQWUsTUFBTUMsZ0JBQU4sU0FBK0JDLFdBQS9CLENBQTJDO0FBQUE7QUFBQTs7QUFBQSx3Q0FLakIsSUFMaUI7O0FBQUEsa0NBTy9DLEVBUCtDO0FBQUE7O0FBQ3RELGFBQVdDLGtCQUFYLEdBQWdDO0FBQzVCLFdBQU8sQ0FBQyxNQUFELENBQVA7QUFDSDs7QUFNREMsRUFBQUEsZUFBZSxDQUFDQyxJQUFELEVBQWU7QUFDMUIsV0FBT1AsS0FBSyxDQUFDUSxhQUFOLENBQW9CTixNQUFwQixFQUE0QjtBQUFFSyxNQUFBQTtBQUFGLEtBQTVCLEVBQXNDUCxLQUFLLENBQUNRLGFBQU4sQ0FBb0IsTUFBcEIsQ0FBdEMsQ0FBUDtBQUNIOztBQUVEQyxFQUFBQSxpQkFBaUIsR0FBRztBQUNoQkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWjtBQUVBLFNBQUtDLFVBQUwsR0FBa0JDLFFBQVEsQ0FBQ0wsYUFBVCxDQUF1QixNQUF2QixDQUFsQixDQUhnQixDQUloQjtBQUNBOztBQUNBLFNBQUtNLFdBQUwsQ0FBaUIsS0FBS0YsVUFBdEI7QUFFQSxVQUFNTCxJQUFJLEdBQUcsS0FBS1EsWUFBTCxDQUFrQixNQUFsQixLQUE2QixLQUFLUixJQUEvQztBQUNBTixJQUFBQSxRQUFRLENBQUNlLE1BQVQsQ0FBZ0IsS0FBS1YsZUFBTCxDQUFxQkMsSUFBckIsQ0FBaEIsRUFBNEMsS0FBS0ssVUFBakQsRUFUZ0IsQ0FVaEI7QUFDSDs7QUFFREssRUFBQUEsd0JBQXdCLENBQUNWLElBQUQsRUFBZVcsUUFBZixFQUFpQ0MsUUFBakMsRUFBbUQ7QUFDdkUsUUFBSSxLQUFLUCxVQUFMLElBQW1CTCxJQUFJLEtBQUssTUFBaEMsRUFBd0M7QUFDcENOLE1BQUFBLFFBQVEsQ0FBQ2UsTUFBVCxDQUFnQixLQUFLVixlQUFMLENBQXFCYSxRQUFyQixDQUFoQixFQUFnRCxLQUFLUCxVQUFyRDtBQUNIO0FBQ0o7O0FBOUJxRDtBQThDMURRLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsTUFBdEIsQ0FBNkIsbUJBQTdCLEVBQWtEbkIsZ0JBQWxEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbi8vIGltcG9ydCAqIGFzIHJldGFyZ2V0RXZlbnRzIGZyb20gJ3JlYWN0LXNoYWRvdy1kb20tcmV0YXJnZXQtZXZlbnRzJztcbmltcG9ydCBDZXRlc3QgZnJvbSAnLi9DZXRlc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2xsYXBzaWJsZVBhbmVsIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gWyduYW1lJ107XG4gICAgfVxuXG4gICAgbW91bnRQb2ludDogSFRNTFNwYW5FbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgICBuYW1lID0gJyc7XG5cbiAgICBjcmVhdGVDb2xsYXBzZWQobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENldGVzdCwgeyBuYW1lIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3Nsb3QnKSk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjb25uZWN0ZWQnKTtcblxuICAgICAgICB0aGlzLm1vdW50UG9pbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIC8vIGNvbnN0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgLy8gc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0aGlzLm1vdW50UG9pbnQpO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMubW91bnRQb2ludCk7XG5cbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCduYW1lJykgfHwgdGhpcy5uYW1lO1xuICAgICAgICBSZWFjdERPTS5yZW5kZXIodGhpcy5jcmVhdGVDb2xsYXBzZWQobmFtZSksIHRoaXMubW91bnRQb2ludCk7XG4gICAgICAgIC8vIHJldGFyZ2V0RXZlbnRzKHNoYWRvd1Jvb3QpO1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lOiBzdHJpbmcsIG9sZFZhbHVlOiBzdHJpbmcsIG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMubW91bnRQb2ludCAmJiBuYW1lID09PSAnbmFtZScpIHtcbiAgICAgICAgICAgIFJlYWN0RE9NLnJlbmRlcih0aGlzLmNyZWF0ZUNvbGxhcHNlZChuZXdWYWx1ZSksIHRoaXMubW91bnRQb2ludCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuICAgIG5hbWVzcGFjZSBKU1gge1xuICAgICAgICBpbnRlcmZhY2UgSW50cmluc2ljRWxlbWVudHMge1xuICAgICAgICAgICAgJ2NvbGxhcHNpYmxlLXBhbmVsJzogTXlFbGVtZW50QXR0cmlidXRlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGludGVyZmFjZSBNeUVsZW1lbnRBdHRyaWJ1dGVzIHtcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgfVxuICAgIH1cbn1cblxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnY29sbGFwc2libGUtcGFuZWwnLCBDb2xsYXBzaWJsZVBhbmVsKTtcbiJdfQ==