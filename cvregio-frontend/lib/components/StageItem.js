import { RichText } from '@wordpress/editor';

const StageItem = ({
  attributes,
  isEdit = false,
  setAttributes
}) => {
  const {
    brightness,
    title,
    description,
    url
  } = attributes;
  const classNames = `cv-stage-card${isEdit ? ' cv-stage-edit-item' : ''}`;
  return React.createElement("div", {
    className: classNames
  }, React.createElement("div", {
    className: "cv-stage-card__bg",
    "data-background-url": url,
    "data-brightness": brightness,
    style: {
      backgroundImage: `url(${url})`,
      // @ts-ignore
      '--brightness': `${brightness}%`
    }
  }), React.createElement("div", {
    className: "cv-stage-card__overlay"
  }), React.createElement("div", {
    className: "cv-stage-card__body"
  }, React.createElement("div", {
    className: "cv-stage-card__title-wrapper"
  }, !isEdit && React.createElement(RichText.Content, {
    tagName: "h2",
    className: "cv-stage-card__title",
    style: {
      // @ts-ignore
      '--title-font-size-factor': '1'
    },
    value: title
  }), isEdit && // if edit use a span to overcome styling issues
  React.createElement(RichText, {
    tagName: "span",
    placeholder: "Stage \xDCberschrift",
    keepPlaceholderOnFocus: true,
    formattingControls: [],
    value: title,
    className: "cv-stage-card__title",
    style: {
      // @ts-ignore
      '--title-font-size-factor': '1'
    },
    onChange: value => setAttributes({
      title: value === '<br>' ? '' : value
    })
  })), !isEdit && React.createElement(RichText.Content, {
    tagName: "p",
    className: "cv-stage-card__description",
    value: description
  }), isEdit && // if edit use a span to overcome styling issues
  React.createElement(RichText, {
    tagName: "span",
    placeholder: "Stage Inhalt (optional)",
    keepPlaceholderOnFocus: true // @ts-ignore // TODO: check type error
    ,
    formattingControls: ['bold'],
    value: description,
    className: "cv-stage-card__description",
    onChange: value => setAttributes({
      description: value
    })
  }), React.createElement("div", {
    className: "cv-stage-card__link"
  }, React.createElement("a", {
    "v-if": "item.link",
    href: "/"
  }))));
};

export default StageItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL1N0YWdlSXRlbS50c3giXSwibmFtZXMiOlsiUmljaFRleHQiLCJTdGFnZUl0ZW0iLCJhdHRyaWJ1dGVzIiwiaXNFZGl0Iiwic2V0QXR0cmlidXRlcyIsImJyaWdodG5lc3MiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwidXJsIiwiY2xhc3NOYW1lcyIsImJhY2tncm91bmRJbWFnZSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxRQUFULFFBQXlCLG1CQUF6Qjs7QUFtQkEsTUFBTUMsU0FBd0MsR0FBRyxDQUFDO0FBQzlDQyxFQUFBQSxVQUQ4QztBQUU5Q0MsRUFBQUEsTUFBTSxHQUFHLEtBRnFDO0FBRzlDQyxFQUFBQTtBQUg4QyxDQUFELEtBSTNDO0FBQ0YsUUFBTTtBQUFFQyxJQUFBQSxVQUFGO0FBQWNDLElBQUFBLEtBQWQ7QUFBcUJDLElBQUFBLFdBQXJCO0FBQWtDQyxJQUFBQTtBQUFsQyxNQUEwQ04sVUFBaEQ7QUFDQSxRQUFNTyxVQUFVLEdBQUksZ0JBQWVOLE1BQU0sR0FBRyxxQkFBSCxHQUEyQixFQUFHLEVBQXZFO0FBQ0EsU0FDSTtBQUFLLElBQUEsU0FBUyxFQUFFTTtBQUFoQixLQUNJO0FBQ0ksSUFBQSxTQUFTLEVBQUMsbUJBRGQ7QUFFSSwyQkFBcUJELEdBRnpCO0FBR0ksdUJBQWlCSCxVQUhyQjtBQUlJLElBQUEsS0FBSyxFQUFFO0FBQ0hLLE1BQUFBLGVBQWUsRUFBRyxPQUFNRixHQUFJLEdBRHpCO0FBRUg7QUFDQSxzQkFBaUIsR0FBRUgsVUFBVztBQUgzQjtBQUpYLElBREosRUFXSTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsSUFYSixFQVlJO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNJO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNLLENBQUNGLE1BQUQsSUFDRyxvQkFBQyxRQUFELENBQVUsT0FBVjtBQUNJLElBQUEsT0FBTyxFQUFDLElBRFo7QUFFSSxJQUFBLFNBQVMsRUFBQyxzQkFGZDtBQUdJLElBQUEsS0FBSyxFQUFFO0FBQ0g7QUFDQSxrQ0FBNEI7QUFGekIsS0FIWDtBQU9JLElBQUEsS0FBSyxFQUFFRztBQVBYLElBRlIsRUFZS0gsTUFBTSxJQUNIO0FBQ0Esc0JBQUMsUUFBRDtBQUNJLElBQUEsT0FBTyxFQUFDLE1BRFo7QUFFSSxJQUFBLFdBQVcsRUFBQyxzQkFGaEI7QUFHSSxJQUFBLHNCQUFzQixNQUgxQjtBQUlJLElBQUEsa0JBQWtCLEVBQUUsRUFKeEI7QUFLSSxJQUFBLEtBQUssRUFBRUcsS0FMWDtBQU1JLElBQUEsU0FBUyxFQUFDLHNCQU5kO0FBT0ksSUFBQSxLQUFLLEVBQUU7QUFDSDtBQUNBLGtDQUE0QjtBQUZ6QixLQVBYO0FBV0ksSUFBQSxRQUFRLEVBQUVLLEtBQUssSUFDWFAsYUFBYSxDQUFDO0FBQ1ZFLE1BQUFBLEtBQUssRUFBRUssS0FBSyxLQUFLLE1BQVYsR0FBbUIsRUFBbkIsR0FBd0JBO0FBRHJCLEtBQUQ7QUFackIsSUFkUixDQURKLEVBa0NLLENBQUNSLE1BQUQsSUFDRyxvQkFBQyxRQUFELENBQVUsT0FBVjtBQUNJLElBQUEsT0FBTyxFQUFDLEdBRFo7QUFFSSxJQUFBLFNBQVMsRUFBQyw0QkFGZDtBQUdJLElBQUEsS0FBSyxFQUFFSTtBQUhYLElBbkNSLEVBeUNLSixNQUFNLElBQ0g7QUFDQSxzQkFBQyxRQUFEO0FBQ0ksSUFBQSxPQUFPLEVBQUMsTUFEWjtBQUVJLElBQUEsV0FBVyxFQUFDLHlCQUZoQjtBQUdJLElBQUEsc0JBQXNCLE1BSDFCLENBSUk7QUFKSjtBQUtJLElBQUEsa0JBQWtCLEVBQUUsQ0FBQyxNQUFELENBTHhCO0FBTUksSUFBQSxLQUFLLEVBQUVJLFdBTlg7QUFPSSxJQUFBLFNBQVMsRUFBQyw0QkFQZDtBQVFJLElBQUEsUUFBUSxFQUFFSSxLQUFLLElBQ1hQLGFBQWEsQ0FBQztBQUFFRyxNQUFBQSxXQUFXLEVBQUVJO0FBQWYsS0FBRDtBQVRyQixJQTNDUixFQXdESTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsS0FDSTtBQUFHLFlBQUssV0FBUjtBQUFvQixJQUFBLElBQUksRUFBQztBQUF6QixJQURKLENBeERKLENBWkosQ0FESjtBQTZFSCxDQXBGRDs7QUFzRkEsZUFBZVYsU0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJpY2hUZXh0IH0gZnJvbSAnQHdvcmRwcmVzcy9lZGl0b3InO1xuaW1wb3J0IHsgQmxvY2tFZGl0UHJvcHMgfSBmcm9tICdAd29yZHByZXNzL2Jsb2Nrcyc7XG5pbXBvcnQgeyBDb21wb25lbnRUeXBlIH0gZnJvbSAnQHdvcmRwcmVzcy9lbGVtZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBTdGFnZUl0ZW1BdHRyaWJ1dGVzIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgYnJpZ2h0bmVzczogbnVtYmVyO1xuICAgIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YWdlSXRlbVByb3BzIGV4dGVuZHMgQmxvY2tFZGl0UHJvcHM8U3RhZ2VJdGVtQXR0cmlidXRlcz4ge1xuICAgIGlzRWRpdDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgU3RhZ2VJdGVtQmFja2VuZENvbXBvbmVudFR5cGUgPSBDb21wb25lbnRUeXBlPFxuICAgIEJsb2NrRWRpdFByb3BzPFN0YWdlSXRlbUF0dHJpYnV0ZXM+XG4+O1xuXG5jb25zdCBTdGFnZUl0ZW06IENvbXBvbmVudFR5cGU8U3RhZ2VJdGVtUHJvcHM+ID0gKHtcbiAgICBhdHRyaWJ1dGVzLFxuICAgIGlzRWRpdCA9IGZhbHNlLFxuICAgIHNldEF0dHJpYnV0ZXMsXG59KSA9PiB7XG4gICAgY29uc3QgeyBicmlnaHRuZXNzLCB0aXRsZSwgZGVzY3JpcHRpb24sIHVybCB9ID0gYXR0cmlidXRlcztcbiAgICBjb25zdCBjbGFzc05hbWVzID0gYGN2LXN0YWdlLWNhcmQke2lzRWRpdCA/ICcgY3Ytc3RhZ2UtZWRpdC1pdGVtJyA6ICcnfWA7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXN9PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImN2LXN0YWdlLWNhcmRfX2JnXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJhY2tncm91bmQtdXJsPXt1cmx9XG4gICAgICAgICAgICAgICAgZGF0YS1icmlnaHRuZXNzPXticmlnaHRuZXNzfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3VybH0pYCxcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAnLS1icmlnaHRuZXNzJzogYCR7YnJpZ2h0bmVzc30lYCxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3Ytc3RhZ2UtY2FyZF9fb3ZlcmxheVwiIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN2LXN0YWdlLWNhcmRfX2JvZHlcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN2LXN0YWdlLWNhcmRfX3RpdGxlLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgeyFpc0VkaXQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFJpY2hUZXh0LkNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdOYW1lPVwiaDJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImN2LXN0YWdlLWNhcmRfX3RpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctLXRpdGxlLWZvbnQtc2l6ZS1mYWN0b3InOiAnMScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICB7aXNFZGl0ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGVkaXQgdXNlIGEgc3BhbiB0byBvdmVyY29tZSBzdHlsaW5nIGlzc3Vlc1xuICAgICAgICAgICAgICAgICAgICAgICAgPFJpY2hUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZT1cInNwYW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU3RhZ2Ugw5xiZXJzY2hyaWZ0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZWVwUGxhY2Vob2xkZXJPbkZvY3VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGluZ0NvbnRyb2xzPXtbXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY3Ytc3RhZ2UtY2FyZF9fdGl0bGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy0tdGl0bGUtZm9udC1zaXplLWZhY3Rvcic6ICcxJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWx1ZSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB2YWx1ZSA9PT0gJzxicj4nID8gJycgOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHshaXNFZGl0ICYmIChcbiAgICAgICAgICAgICAgICAgICAgPFJpY2hUZXh0LkNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ05hbWU9XCJwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImN2LXN0YWdlLWNhcmRfX2Rlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtpc0VkaXQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBlZGl0IHVzZSBhIHNwYW4gdG8gb3ZlcmNvbWUgc3R5bGluZyBpc3N1ZXNcbiAgICAgICAgICAgICAgICAgICAgPFJpY2hUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdOYW1lPVwic3BhblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlN0YWdlIEluaGFsdCAob3B0aW9uYWwpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlZXBQbGFjZWhvbGRlck9uRm9jdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgLy8gVE9ETzogY2hlY2sgdHlwZSBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGluZ0NvbnRyb2xzPXtbJ2JvbGQnXX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImN2LXN0YWdlLWNhcmRfX2Rlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWx1ZSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEF0dHJpYnV0ZXMoeyBkZXNjcmlwdGlvbjogdmFsdWUgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3Ytc3RhZ2UtY2FyZF9fbGlua1wiPlxuICAgICAgICAgICAgICAgICAgICA8YSB2LWlmPVwiaXRlbS5saW5rXCIgaHJlZj1cIi9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiB7IGxpbmsgfSAqL31cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFnZUl0ZW07XG4iXX0=