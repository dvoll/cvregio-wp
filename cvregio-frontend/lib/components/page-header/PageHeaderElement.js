function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable @typescript-eslint/no-namespace */
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import PageHeader from './PageHeader'; // import * as retargetEvents from 'react-shadow-dom-retarget-events';

export default class PageHeaderElement extends HTMLElement {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "mountPoint", null);

    _defineProperty(this, "title", '');

    _defineProperty(this, "menuItems", []);
  }

  static get observedAttributes() {
    return ['title'];
  }

  mounted(innerHTML) {
    if (innerHTML) {
      const htmlDoc = new DOMParser().parseFromString(innerHTML, 'text/html');
      const mainMenu = htmlDoc.querySelector('.main-menu');
      this.menuItems = this.getMenuItems(mainMenu === null || mainMenu === void 0 ? void 0 : mainMenu.children);
      return this.menuItems;
    }

    return [];
  }

  getMenuItems(items) {
    if (!items) return [];
    const list = Array.from(items).map(item => {
      if (!item.children || !item.children[0]) return undefined;
      const child = item.children[0];
      const menuItem = {
        title: child.innerText,
        children: [],
        href: child instanceof HTMLAnchorElement ? child.href : ''
      };

      if (item.classList.contains('current-menu-item')) {
        menuItem.current = true;
      }

      if (item.children[2]) {
        menuItem.children = this.getMenuItems(item.children[2].children);
      }

      return menuItem;
    });
    return list.filter(item => item !== undefined);
  }

  createComponent(title, subtitle, logoUrl, menuItems) {
    return React.createElement(PageHeader, {
      title,
      subtitle,
      logoUrl,
      menuItems
    });
  }

  connectedCallback() {
    this.mountPoint = document.createElement('div');
    this.appendChild(this.mountPoint);
    const title = this.getAttribute('title') || this.title;
    const subtitle = this.getAttribute('subtitle') || '';
    const logoUrl = this.getAttribute('logoUrl') || '';
    const menuItems = this.mounted(this.innerHTML);
    ReactDOM.render(this.createComponent(title, subtitle, logoUrl, menuItems), this.mountPoint);
  }

  attributeChangedCallback(title, oldValue, newValue) {
    if (this.mountPoint && title === 'title') {
      ReactDOM.render(this.createComponent(newValue, '', '', []), this.mountPoint);
    }
  }

}
window.customElements.define('page-header', PageHeaderElement);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,