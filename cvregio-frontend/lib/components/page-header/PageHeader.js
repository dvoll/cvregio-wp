function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { CSSTransition } from 'react-transition-group';
import MenuPage from './MenuPage';
import Icon, { IconTypes } from '../base/Icon';
import Header from './Header';
import PageSubmenu from './PageSubmenu';
import Navigation from './Navigation';
import './PageHeader.scss';
import Hamburger from './Hamburger'; // import './MenuPage.scss';

class PageHeader extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "smallHeaderHeight", 50);

    _defineProperty(this, "state", {
      smallHeader: false,
      activeItem: undefined,
      mobileOpen: false,
      isMobile: false
    });
  }

  componentDidMount() {
    this.addScrollEventListener();
    this.addResizeEventListener();
    this.handleResize(window.innerWidth);
  }

  submenuIsOpen() {
    var _activeItem$children;

    const {
      activeItem
    } = this.state;
    const length = activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$children = activeItem.children) === null || _activeItem$children === void 0 ? void 0 : _activeItem$children.length;
    return (length !== null && length !== void 0 ? length : 0) > 0;
  }

  shouldShowSmallHeader() {
    const {
      smallHeader,
      isMobile
    } = this.state;
    return smallHeader || isMobile;
  }

  disableBodyScroll(noscroll) {
    if (noscroll) {
      document.getElementsByTagName('body')[0].classList.add('no-scroll');
    } else {
      document.getElementsByTagName('body')[0].classList.remove('no-scroll');
    }
  }

  addResizeEventListener() {
    let lastKnownResizeWidth = 0;
    let ticking = false;
    window.addEventListener('resize', () => {
      lastKnownResizeWidth = window.innerWidth;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          this.handleResize(lastKnownResizeWidth);
          ticking = false;
        });
        ticking = true;
      }
    });
  }

  addScrollEventListener() {
    let lastKnownScrollPosition = 0;
    let ticking = false;
    window.addEventListener('scroll', () => {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          this.changeHeader(lastKnownScrollPosition);
          ticking = false;
        });
        ticking = true;
      }
    });
  }

  changeHeader(position) {
    const {
      smallHeader
    } = this.state;

    if (!smallHeader && position > this.smallHeaderHeight) {
      this.setState({
        smallHeader: true
      });
    }

    if (smallHeader && position < this.smallHeaderHeight) {
      this.setState({
        smallHeader: false
      });
    }
  }

  handleResize(width) {
    const {
      mobileOpen
    } = this.state;
    let shouldMobile = width < 1200;

    if (width < 1200) {
      shouldMobile = true;
      this.disableBodyScroll(mobileOpen);
    } else {
      shouldMobile = false;
      this.setState({
        mobileOpen: false
      });
      this.disableBodyScroll(false);
    }

    this.setState({
      isMobile: shouldMobile
    });
  }

  toggleMenu(menuItem) {
    const {
      activeItem
    } = this.state;

    if (activeItem && activeItem.title === menuItem.title) {
      this.setState({
        activeItem: undefined
      });
      return;
    }

    this.setState({
      activeItem: menuItem
    });
  }

  toggleMobileMenu() {
    const {
      mobileOpen
    } = this.state;

    if (mobileOpen && this.submenuIsOpen()) {
      this.closeSubmenu();
    }

    this.setState({
      mobileOpen: !mobileOpen
    });
    this.disableBodyScroll(mobileOpen);
  }

  closeSubmenu() {
    console.log('close submenu');
    this.setState({
      activeItem: undefined
    });
  }

  render() {
    const {
      smallHeader,
      activeItem,
      mobileOpen,
      isMobile
    } = this.state;
    const {
      menuItems,
      title,
      subtitle,
      logoUrl
    } = this.props;
    let classNames = 'cv-header';

    if (this.shouldShowSmallHeader()) {
      classNames += ' cv-header--small';
    }

    if (activeItem && (!isMobile || mobileOpen)) {
      classNames += ' cv-header--submenu-open';
    }

    if (isMobile) {
      classNames += ' cv-header--mobile';
    }

    if (mobileOpen) {
      classNames += ' cv-header--mobile-open';
    }

    return React.createElement(React.Fragment, null, React.createElement("div", {
      className: `header-placeholder ${isMobile ? 'header-placeholder--mobile' : ''}`
    }), React.createElement(CSSTransition, {
      in: activeItem && !isMobile // in
      ,
      timeout: 200,
      classNames: "fade",
      unmountOnExit: true // onEnter={() => setShowButton(false)}
      // onExited={() => setShowButton(true)}

    }, React.createElement("div", {
      className: "overlay",
      "aria-hidden": "true",
      onClick: () => this.closeSubmenu(),
      style: {
        position: 'fixed',
        zIndex: 95,
        width: '100vw',
        height: '100vh',
        background: 'rgba(0,0,0,0.2)'
      } // style="position: fixed; z-index: 95; width: 100vw; height: 100vh; background: rgba(0,0,0,0.2);"

    })), React.createElement("div", {
      className: classNames
    }, React.createElement(CSSTransition, {
      in: isMobile && mobileOpen,
      timeout: 200,
      classNames: "fade-from-top",
      unmountOnExit: true
    }, React.createElement(MenuPage, {
      className: "cv-header__mobile-menu",
      menuItems: menuItems,
      onItemSelect: item => this.toggleMenu(item),
      title: "Men\xFC"
    })), React.createElement(CSSTransition, {
      in: isMobile && mobileOpen && this.submenuIsOpen(),
      timeout: 2000,
      classNames: "fade-from-left",
      unmountOnExit: true
    }, React.createElement(MenuPage, {
      className: "cv-header__mobile-submenu",
      "v-if": "isMobile && mobileOpen && this.submenuIsOpen()",
      menuItems: activeItem === null || activeItem === void 0 ? void 0 : activeItem.children,
      allowChildren: false,
      title: activeItem ? activeItem.title : '',
      backButtonTitle: "Zur\xFCck",
      close: () => {
        this.closeSubmenu();
      }
    }, React.createElement("template", {
      slot: "info"
    }, React.createElement("p", {
      className: "description-block__text"
    }), React.createElement("a", {
      href: activeItem === null || activeItem === void 0 ? void 0 : activeItem.href,
      className: "button description-block__link"
    }, React.createElement(Icon, {
      icon: IconTypes.ArrowRight
    }), "\xDCbersicht")))), !isMobile && React.createElement(PageSubmenu, {
      className: "cv-header__submenu",
      isList: false,
      menuItem: activeItem
    }), React.createElement(Header, {
      className: "cv-header__page-header",
      title: title,
      subtitle: subtitle,
      small: this.shouldShowSmallHeader(),
      logoUrl: logoUrl,
      mobile: isMobile,
      menuButton: React.createElement(Hamburger, {
        open: mobileOpen,
        onClick: () => this.toggleMobileMenu()
      })
    }, React.createElement(Navigation, {
      menuItems: menuItems,
      toggleMenu: menuItem => this.toggleMenu(menuItem),
      activeItem: activeItem,
      small: smallHeader
    }))));
  }

}

export default PageHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,