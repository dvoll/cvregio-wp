import React, { Component } from 'react';
import Icon, { IconTypes } from '../base/Icon';
import SubmenuLink from './SubmenuLink';
import './MenuPage.scss';
export default class MenuPage extends Component {
  constructor(props) {
    super(props);
    this.handleBackClick = this.handleBackClick.bind(this);
    this.handleItemClick = this.handleItemClick.bind(this);
  }

  getHrefForItem(item) {
    return !this.hasChildren(item) ? item.href : undefined;
  }

  hasChildren(item) {
    const {
      allowChildren = true
    } = this.props;
    return allowChildren && item.children && item.children.length > 0;
  }

  handleItemClick(item) {
    const {
      onItemSelect
    } = this.props;
    return onItemSelect && onItemSelect(item);
  }

  handleBackClick() {
    const {
      close
    } = this.props; // return close?.call(this);

    return close && close();
  }

  render() {
    const {
      title,
      backButtonTitle,
      menuItems = [],
      info,
      className = ''
    } = this.props;
    const items = menuItems.map(item => {
      return React.createElement("li", {
        key: `menupage${item.title}-${item.href}`
      }, React.createElement(SubmenuLink, {
        href: this.getHrefForItem(item),
        onClick: () => this.handleItemClick(item),
        type: "inline",
        iconEnd: this.hasChildren(item) ? IconTypes.ArrowRight : undefined
      }, item.title));
    });
    return React.createElement("div", {
      className: `menu-page ${className}`
    }, React.createElement("a", {
      role: "button",
      tabIndex: 0,
      onClick: this.handleBackClick // TODO: Check if event is acceptable
      ,
      onKeyPress: this.handleBackClick,
      className: `menu-page__back-link ${backButtonTitle ? 'menu-page__back-link--visible' : ''}`,
      "data-class": "{ 'menu-page__back-link--visible': !!backButtonTitle }"
    }, React.createElement(Icon, {
      icon: IconTypes.ArrowLeft
    }), backButtonTitle), React.createElement("h2", {
      className: "menu-page__header"
    }, title), React.createElement("div", {
      className: "menu-page__info"
    }, info), React.createElement("ul", {
      className: "menu-list"
    }, items));
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3BhZ2UtaGVhZGVyL01lbnVQYWdlLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIkNvbXBvbmVudCIsIkljb24iLCJJY29uVHlwZXMiLCJTdWJtZW51TGluayIsIk1lbnVQYWdlIiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImhhbmRsZUJhY2tDbGljayIsImJpbmQiLCJoYW5kbGVJdGVtQ2xpY2siLCJnZXRIcmVmRm9ySXRlbSIsIml0ZW0iLCJoYXNDaGlsZHJlbiIsImhyZWYiLCJ1bmRlZmluZWQiLCJhbGxvd0NoaWxkcmVuIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJvbkl0ZW1TZWxlY3QiLCJjbG9zZSIsInJlbmRlciIsInRpdGxlIiwiYmFja0J1dHRvblRpdGxlIiwibWVudUl0ZW1zIiwiaW5mbyIsImNsYXNzTmFtZSIsIml0ZW1zIiwibWFwIiwiQXJyb3dSaWdodCIsIkFycm93TGVmdCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxJQUFnQkMsU0FBaEIsUUFBaUMsT0FBakM7QUFFQSxPQUFPQyxJQUFQLElBQWVDLFNBQWYsUUFBZ0MsY0FBaEM7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGVBQXhCO0FBQ0EsT0FBTyxpQkFBUDtBQWFBLGVBQWUsTUFBTUMsUUFBTixTQUF1QkosU0FBdkIsQ0FBZ0Q7QUFDM0RLLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUF1QjtBQUM5QixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QixLQUFLQSxlQUFMLENBQXFCQyxJQUFyQixDQUEwQixJQUExQixDQUF2QjtBQUNBLFNBQUtDLGVBQUwsR0FBdUIsS0FBS0EsZUFBTCxDQUFxQkQsSUFBckIsQ0FBMEIsSUFBMUIsQ0FBdkI7QUFDSDs7QUFFREUsRUFBQUEsY0FBYyxDQUFDQyxJQUFELEVBQWlCO0FBQzNCLFdBQU8sQ0FBQyxLQUFLQyxXQUFMLENBQWlCRCxJQUFqQixDQUFELEdBQTBCQSxJQUFJLENBQUNFLElBQS9CLEdBQXNDQyxTQUE3QztBQUNIOztBQUVERixFQUFBQSxXQUFXLENBQUNELElBQUQsRUFBaUI7QUFDeEIsVUFBTTtBQUFFSSxNQUFBQSxhQUFhLEdBQUc7QUFBbEIsUUFBMkIsS0FBS1QsS0FBdEM7QUFDQSxXQUFPUyxhQUFhLElBQUlKLElBQUksQ0FBQ0ssUUFBdEIsSUFBa0NMLElBQUksQ0FBQ0ssUUFBTCxDQUFjQyxNQUFkLEdBQXVCLENBQWhFO0FBQ0g7O0FBRURSLEVBQUFBLGVBQWUsQ0FBQ0UsSUFBRCxFQUFpQjtBQUM1QixVQUFNO0FBQUVPLE1BQUFBO0FBQUYsUUFBbUIsS0FBS1osS0FBOUI7QUFDQSxXQUFPWSxZQUFZLElBQUlBLFlBQVksQ0FBQ1AsSUFBRCxDQUFuQztBQUNIOztBQUVESixFQUFBQSxlQUFlLEdBQUc7QUFDZCxVQUFNO0FBQUVZLE1BQUFBO0FBQUYsUUFBWSxLQUFLYixLQUF2QixDQURjLENBRWQ7O0FBQ0EsV0FBT2EsS0FBSyxJQUFJQSxLQUFLLEVBQXJCO0FBQ0g7O0FBRURDLEVBQUFBLE1BQU0sR0FBRztBQUNMLFVBQU07QUFBRUMsTUFBQUEsS0FBRjtBQUFTQyxNQUFBQSxlQUFUO0FBQTBCQyxNQUFBQSxTQUFTLEdBQUcsRUFBdEM7QUFBMENDLE1BQUFBLElBQTFDO0FBQWdEQyxNQUFBQSxTQUFTLEdBQUc7QUFBNUQsUUFBbUUsS0FBS25CLEtBQTlFO0FBRUEsVUFBTW9CLEtBQUssR0FBR0gsU0FBUyxDQUFDSSxHQUFWLENBQWNoQixJQUFJLElBQUk7QUFDaEMsYUFDSTtBQUFJLFFBQUEsR0FBRyxFQUFHLFdBQVVBLElBQUksQ0FBQ1UsS0FBTSxJQUFHVixJQUFJLENBQUNFLElBQUs7QUFBNUMsU0FDSSxvQkFBQyxXQUFEO0FBQ0ksUUFBQSxJQUFJLEVBQUUsS0FBS0gsY0FBTCxDQUFvQkMsSUFBcEIsQ0FEVjtBQUVJLFFBQUEsT0FBTyxFQUFFLE1BQU0sS0FBS0YsZUFBTCxDQUFxQkUsSUFBckIsQ0FGbkI7QUFHSSxRQUFBLElBQUksRUFBQyxRQUhUO0FBSUksUUFBQSxPQUFPLEVBQUUsS0FBS0MsV0FBTCxDQUFpQkQsSUFBakIsSUFBeUJULFNBQVMsQ0FBQzBCLFVBQW5DLEdBQWdEZDtBQUo3RCxTQU1LSCxJQUFJLENBQUNVLEtBTlYsQ0FESixDQURKO0FBWUgsS0FiYSxDQUFkO0FBZUEsV0FDSTtBQUFLLE1BQUEsU0FBUyxFQUFHLGFBQVlJLFNBQVU7QUFBdkMsT0FFSTtBQUNJLE1BQUEsSUFBSSxFQUFDLFFBRFQ7QUFFSSxNQUFBLFFBQVEsRUFBRSxDQUZkO0FBR0ksTUFBQSxPQUFPLEVBQUUsS0FBS2xCLGVBSGxCLENBSUk7QUFKSjtBQUtJLE1BQUEsVUFBVSxFQUFFLEtBQUtBLGVBTHJCO0FBTUksTUFBQSxTQUFTLEVBQUcsd0JBQ1JlLGVBQWUsR0FBRywrQkFBSCxHQUFxQyxFQUN2RCxFQVJMO0FBU0ksb0JBQVc7QUFUZixPQVdJLG9CQUFDLElBQUQ7QUFBTSxNQUFBLElBQUksRUFBRXBCLFNBQVMsQ0FBQzJCO0FBQXRCLE1BWEosRUFZS1AsZUFaTCxDQUZKLEVBZ0JJO0FBQUksTUFBQSxTQUFTLEVBQUM7QUFBZCxPQUFtQ0QsS0FBbkMsQ0FoQkosRUFpQkk7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQWtDRyxJQUFsQyxDQWpCSixFQWtCSTtBQUFJLE1BQUEsU0FBUyxFQUFDO0FBQWQsT0FBMkJFLEtBQTNCLENBbEJKLENBREo7QUFzQkg7O0FBbkUwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZW51SXRlbSB9IGZyb20gJy4vUGFnZUhlYWRlcic7XG5pbXBvcnQgSWNvbiwgeyBJY29uVHlwZXMgfSBmcm9tICcuLi9iYXNlL0ljb24nO1xuaW1wb3J0IFN1Ym1lbnVMaW5rIGZyb20gJy4vU3VibWVudUxpbmsnO1xuaW1wb3J0ICcuL01lbnVQYWdlLnNjc3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lbnVQYWdlUHJvcHMge1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBiYWNrQnV0dG9uVGl0bGU/OiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBtZW51SXRlbXM/OiBNZW51SXRlbVtdO1xuICAgIGFsbG93Q2hpbGRyZW4/OiBib29sZWFuO1xuICAgIG9uSXRlbVNlbGVjdD86IChtZW51SXRlbTogTWVudUl0ZW0pID0+IHZvaWQ7XG4gICAgY2xvc2U/OiAoKSA9PiB2b2lkO1xuICAgIGluZm8/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVQYWdlIGV4dGVuZHMgQ29tcG9uZW50PE1lbnVQYWdlUHJvcHM+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogTWVudVBhZ2VQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQmFja0NsaWNrID0gdGhpcy5oYW5kbGVCYWNrQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVJdGVtQ2xpY2sgPSB0aGlzLmhhbmRsZUl0ZW1DbGljay5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIGdldEhyZWZGb3JJdGVtKGl0ZW06IE1lbnVJdGVtKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5oYXNDaGlsZHJlbihpdGVtKSA/IGl0ZW0uaHJlZiA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBoYXNDaGlsZHJlbihpdGVtOiBNZW51SXRlbSkge1xuICAgICAgICBjb25zdCB7IGFsbG93Q2hpbGRyZW4gPSB0cnVlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gYWxsb3dDaGlsZHJlbiAmJiBpdGVtLmNoaWxkcmVuICYmIGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICBoYW5kbGVJdGVtQ2xpY2soaXRlbTogTWVudUl0ZW0pIHtcbiAgICAgICAgY29uc3QgeyBvbkl0ZW1TZWxlY3QgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiBvbkl0ZW1TZWxlY3QgJiYgb25JdGVtU2VsZWN0KGl0ZW0pO1xuICAgIH1cblxuICAgIGhhbmRsZUJhY2tDbGljaygpIHtcbiAgICAgICAgY29uc3QgeyBjbG9zZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgLy8gcmV0dXJuIGNsb3NlPy5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4gY2xvc2UgJiYgY2xvc2UoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgdGl0bGUsIGJhY2tCdXR0b25UaXRsZSwgbWVudUl0ZW1zID0gW10sIGluZm8sIGNsYXNzTmFtZSA9ICcnIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gbWVudUl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17YG1lbnVwYWdlJHtpdGVtLnRpdGxlfS0ke2l0ZW0uaHJlZn1gfT5cbiAgICAgICAgICAgICAgICAgICAgPFN1Ym1lbnVMaW5rXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmPXt0aGlzLmdldEhyZWZGb3JJdGVtKGl0ZW0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVJdGVtQ2xpY2soaXRlbSl9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiaW5saW5lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25FbmQ9e3RoaXMuaGFzQ2hpbGRyZW4oaXRlbSkgPyBJY29uVHlwZXMuQXJyb3dSaWdodCA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW0udGl0bGV9XG4gICAgICAgICAgICAgICAgICAgIDwvU3VibWVudUxpbms+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YG1lbnUtcGFnZSAke2NsYXNzTmFtZX1gfT5cbiAgICAgICAgICAgICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1pcy12YWxpZCAqL31cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQmFja0NsaWNrfVxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBDaGVjayBpZiBldmVudCBpcyBhY2NlcHRhYmxlXG4gICAgICAgICAgICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMuaGFuZGxlQmFja0NsaWNrfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BtZW51LXBhZ2VfX2JhY2stbGluayAke1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja0J1dHRvblRpdGxlID8gJ21lbnUtcGFnZV9fYmFjay1saW5rLS12aXNpYmxlJyA6ICcnXG4gICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLWNsYXNzPVwieyAnbWVudS1wYWdlX19iYWNrLWxpbmstLXZpc2libGUnOiAhIWJhY2tCdXR0b25UaXRsZSB9XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIGljb249e0ljb25UeXBlcy5BcnJvd0xlZnR9IC8+XG4gICAgICAgICAgICAgICAgICAgIHtiYWNrQnV0dG9uVGl0bGV9XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJtZW51LXBhZ2VfX2hlYWRlclwiPnt0aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVudS1wYWdlX19pbmZvXCI+e2luZm99PC9kaXY+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm1lbnUtbGlzdFwiPntpdGVtc308L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19